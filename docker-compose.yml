services:
  
  frontend:
    container_name: frontend-container
    build: ./frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - node_modules:/app/node_modules
    stdin_open: true
    tty: true
  
  api-service:
    container_name: 'api-container'
    build:
      context: .
      dockerfile: ./base/Dockerfile
      args:
        SERVICE_NAME: "api-service"
    ports:
      - "8080:8080"
    volumes:
      - ./api-service:/app/api-service
      - /app/api-service/node_modules

  backend-service:
    container_name: 'backend-container'
    build:
      context: .
      dockerfile: ./base/Dockerfile
      args:
        SERVICE_NAME: "backend-service"
    ports:
      - "8081:8081"
    volumes:
      - ./backend-service:/app/backend-service
      - /app/backend-service/node_modules
  
  mysql:
    container_name: 'mysql-container'
    image: 'mysql:latest'
    environment:
      - 'MYSQL_DATABASE=messageappdatabase'
      - 'MYSQL_PASSWORD=secret'
      - 'MYSQL_ROOT_PASSWORD=verysecret'
      - 'MYSQL_USER=myuser'
    ports:
      - '3306:3306'

  # KAFKA RELATED CONTAINERS
  zookeeper:
    container_name: 'zookeeper-container'
    image: 'confluentinc/cp-zookeeper:latest'
    ports:
      - "2181:2181"
    environment:
      - 'ZOOKEEPER_CLIENT_PORT=2181'

  kafka:
    container_name: 'kafka-container'
    image: 'confluentinc/cp-kafka:latest'
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    expose:
      - '29092'
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_MIN_INSYNC_REPLICAS: '1'
  
  init-kafka:
    image: 'confluentinc/cp-kafka:latest'
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic message-topic --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "

volumes:
  node_modules: